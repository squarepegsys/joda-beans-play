package com.squarepegsystems;

import org.joda.beans.*;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;

@BeanDefinition
public class Book implements ImmutableBean {

    @PropertyDefinition(validate = "notEmpty")
    private final String title;

    @PropertyDefinition
    private  final Author author;

    @PropertyDefinition
    private final LocalDate publishedDate;


    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code Book}.
     * @return the meta-bean, not null
     */
    public static Book.Meta meta() {
        return Book.Meta.INSTANCE;
    }

    static {
        MetaBean.register(Book.Meta.INSTANCE);
    }

    /**
     * Returns a builder used to create an instance of the bean.
     * @return the builder, not null
     */
    public static Book.Builder builder() {
        return new Book.Builder();
    }

    /**
     * Restricted constructor.
     * @param builder  the builder to copy from, not null
     */
    protected Book(Book.Builder builder) {
        JodaBeanUtils.notEmpty(builder.title, "title");
        this.title = builder.title;
        this.author = builder.author;
        this.publishedDate = builder.publishedDate;
    }

    @Override
    public Book.Meta metaBean() {
        return Book.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the title.
     * @return the value of the property, not empty
     */
    public String getTitle() {
        return title;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the author.
     * @return the value of the property
     */
    public Author getAuthor() {
        return author;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the publishedDate.
     * @return the value of the property
     */
    public LocalDate getPublishedDate() {
        return publishedDate;
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a builder that allows this bean to be mutated.
     * @return the mutable builder, not null
     */
    public Builder toBuilder() {
        return new Builder(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            Book other = (Book) obj;
            return JodaBeanUtils.equal(title, other.title) &&
                    JodaBeanUtils.equal(author, other.author) &&
                    JodaBeanUtils.equal(publishedDate, other.publishedDate);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(title);
        hash = hash * 31 + JodaBeanUtils.hashCode(author);
        hash = hash * 31 + JodaBeanUtils.hashCode(publishedDate);
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(128);
        buf.append("Book{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("title").append('=').append(JodaBeanUtils.toString(title)).append(',').append(' ');
        buf.append("author").append('=').append(JodaBeanUtils.toString(author)).append(',').append(' ');
        buf.append("publishedDate").append('=').append(JodaBeanUtils.toString(publishedDate)).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code Book}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code title} property.
         */
        private final MetaProperty<String> title = DirectMetaProperty.ofImmutable(
                this, "title", Book.class, String.class);
        /**
         * The meta-property for the {@code author} property.
         */
        private final MetaProperty<Author> author = DirectMetaProperty.ofImmutable(
                this, "author", Book.class, Author.class);
        /**
         * The meta-property for the {@code publishedDate} property.
         */
        private final MetaProperty<LocalDate> publishedDate = DirectMetaProperty.ofImmutable(
                this, "publishedDate", Book.class, LocalDate.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "title",
                "author",
                "publishedDate");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 110371416:  // title
                    return title;
                case -1406328437:  // author
                    return author;
                case -1782096196:  // publishedDate
                    return publishedDate;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public Book.Builder builder() {
            return new Book.Builder();
        }

        @Override
        public Class<? extends Book> beanType() {
            return Book.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code title} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> title() {
            return title;
        }

        /**
         * The meta-property for the {@code author} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Author> author() {
            return author;
        }

        /**
         * The meta-property for the {@code publishedDate} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<LocalDate> publishedDate() {
            return publishedDate;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 110371416:  // title
                    return ((Book) bean).getTitle();
                case -1406328437:  // author
                    return ((Book) bean).getAuthor();
                case -1782096196:  // publishedDate
                    return ((Book) bean).getPublishedDate();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            metaProperty(propertyName);
            if (quiet) {
                return;
            }
            throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
        }

    }

    //-----------------------------------------------------------------------
    /**
     * The bean-builder for {@code Book}.
     */
    public static class Builder extends DirectFieldsBeanBuilder<Book> {

        private String title;
        private Author author;
        private LocalDate publishedDate;

        /**
         * Restricted constructor.
         */
        protected Builder() {
        }

        /**
         * Restricted copy constructor.
         * @param beanToCopy  the bean to copy from, not null
         */
        protected Builder(Book beanToCopy) {
            this.title = beanToCopy.getTitle();
            this.author = beanToCopy.getAuthor();
            this.publishedDate = beanToCopy.getPublishedDate();
        }

        //-----------------------------------------------------------------------
        @Override
        public Object get(String propertyName) {
            switch (propertyName.hashCode()) {
                case 110371416:  // title
                    return title;
                case -1406328437:  // author
                    return author;
                case -1782096196:  // publishedDate
                    return publishedDate;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
        }

        @Override
        public Builder set(String propertyName, Object newValue) {
            switch (propertyName.hashCode()) {
                case 110371416:  // title
                    this.title = (String) newValue;
                    break;
                case -1406328437:  // author
                    this.author = (Author) newValue;
                    break;
                case -1782096196:  // publishedDate
                    this.publishedDate = (LocalDate) newValue;
                    break;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
            return this;
        }

        @Override
        public Builder set(MetaProperty<?> property, Object value) {
            super.set(property, value);
            return this;
        }

        @Override
        public Book build() {
            return new Book(this);
        }

        //-----------------------------------------------------------------------
        /**
         * Sets the title.
         * @param title  the new value, not empty
         * @return this, for chaining, not null
         */
        public Builder title(String title) {
            JodaBeanUtils.notEmpty(title, "title");
            this.title = title;
            return this;
        }

        /**
         * Sets the author.
         * @param author  the new value
         * @return this, for chaining, not null
         */
        public Builder author(Author author) {
            this.author = author;
            return this;
        }

        /**
         * Sets the publishedDate.
         * @param publishedDate  the new value
         * @return this, for chaining, not null
         */
        public Builder publishedDate(LocalDate publishedDate) {
            this.publishedDate = publishedDate;
            return this;
        }

        //-----------------------------------------------------------------------
        @Override
        public String toString() {
            StringBuilder buf = new StringBuilder(128);
            buf.append("Book.Builder{");
            int len = buf.length();
            toString(buf);
            if (buf.length() > len) {
                buf.setLength(buf.length() - 2);
            }
            buf.append('}');
            return buf.toString();
        }

        protected void toString(StringBuilder buf) {
            buf.append("title").append('=').append(JodaBeanUtils.toString(title)).append(',').append(' ');
            buf.append("author").append('=').append(JodaBeanUtils.toString(author)).append(',').append(' ');
            buf.append("publishedDate").append('=').append(JodaBeanUtils.toString(publishedDate)).append(',').append(' ');
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
